Q1) Write a shell script that calculates the factorial of a given number n. The number n is passed as a command line argument. (2 marks)

-> # if [ $# -eq 0 ]; then
#   echo "Usage: $0 <number>"
#   exit 1
# fi

n=$1

# if ! [[ "$n" =~ ^[0-9]+$ ]]; then
#   echo "Error: Please provide a non-negative integer."
#   exit 1
# fi

factorial=1

for (( i=1; i<=n; i++ ))
do
  factorial=$((factorial * i))
done

echo "The factorial of $n is: $factorial"

Q2) Write a C program that will create a child process to reverse a user entered string. The parent process will wait for the child to complete its task and then it will check if the string is palindrome
or not, display the appropriate message. (4 Marks)

-> #include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
void reverseString(char *str, char *rev) {
 int len = strlen(str);
 for (int i = 0; i < len; i++) {
 rev[i] = str[len - i - 1];
 }
 rev[len] = '\0'; // Null-terminate the reversed string
}
int main() {
 char str[100], rev[100];
 pid_t pid;
 printf("Enter a string: ");
 scanf("%s", str);
 pid = fork();
 if (pid < 0) {
 // Fork failed
 perror("Fork failed");
 return 1;
 } else if (pid == 0) {
 // Child process: Reverse the string
 reverseString(str, rev);
 printf("Reversed string: %s\n", rev);
 } else {
 // Parent process: Wait for child and check palindrome
 wait(NULL); // Wait for the child process to finish
 reverseString(str, rev);
 if (strcmp(str, rev) == 0) {
 printf("The string is a palindrome.\n");
 } else {
 printf("The string is not a palindrome.\n");
 }
 }
 return 0;
}

Q3) marks obtained by a student in 5 different subjects are input through the keyword. The students gets a division as per the following rules:
Percentage above or equal to 60- First division
Percentage between 50 and 59-Second division
Percentage between 40 and 49- Third division
Percentage less than 40 - Fail
Write a shell program to calculate the division obtained by the student. (4 Marks)

-> int main() {
 int marks[5], total = 0;
 float average;
 int i;
 // Input marks for 5 students
 printf("Enter marks of 5 students:\n");
 for (i = 0; i < 5; i++) {
 printf("Student %d: ", i + 1);
 scanf("%d", &marks[i]);
 // Check for invalid marks
 if (marks[i] < 0 || marks[i] > 100) {
 printf("Invalid marks! Please enter marks between 0 and 100.\n");
 return 1; // Exit with error code
 }
 total += marks[i];
 }
 // Calculate average
 average = total / 5.0;
 // Determine division
 printf("\nAverage Marks: %.2f\n", average);
 if (average >= 60) {
 printf("Division: First\n");
 } else if (average >= 50) {
 printf("Division: Second\n");
 } else if (average >= 40) {
 printf("Division: Third\n");
 } else {
 printf("Division: Fail\n");
 }
 return 0;

Q4) Write a program that creates three threads: Thread A, Thread B, and Thread C. The threads must print numbers in the following sequence: A1, B2, C3, A4, B5, C6... upto 20 numbers.
Thread A prints A1, A4, A7, ...
Thread B prints B2, B5, B8, ...
Thread C prints C3, C6, C9, ...
Requirements:
Use semaphores to control the order of execution of the threads.
Ensure no race conditions occur. (5 Marks)

-> #include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
sem_t sem_A, sem_B, sem_C;
int current_number = 1;

void* thread_A(void* arg) {
    while (current_number <= 20) {
        sem_wait(&sem_A); // Wait for Thread A's turn
        if (current_number <= 20) {
            printf("A%d\n", current_number);
            current_number++;
        }
        sem_post(&sem_B); // Signal Thread B to execute
    }
    pthread_exit(NULL);
}

void* thread_B(void* arg) {
    while (current_number <= 20) {
        sem_wait(&sem_B); // Wait for Thread B's turn
        if (current_number <= 20) {
            printf("B%d\n", current_number);
            current_number++;
        }
        sem_post(&sem_C); // Signal Thread C to execute
    }
    pthread_exit(NULL);
}

void* thread_C(void* arg) {
    while (current_number <= 20) {
        sem_wait(&sem_C); // Wait for Thread C's turn
        if (current_number <= 20) {
            printf("C%d\n", current_number);
            current_number++;
        }
        sem_post(&sem_A); // Signal Thread A to execute
    }
    pthread_exit(NULL);
}

int main() {
    sem_init(&sem_A, 0, 1); 
    sem_init(&sem_B, 0, 0); 
    sem_init(&sem_C, 0, 0); 
    pthread_t threadA, threadB, threadC;
    pthread_create(&threadA, NULL, thread_A, NULL);
    pthread_create(&threadB, NULL, thread_B, NULL);
    pthread_create(&threadC, NULL, thread_C, NULL);
    
    pthread_join(threadA, NULL);
    pthread_join(threadB, NULL);
    pthread_join(threadC, NULL);

    sem_destroy(&sem_A);
    sem_destroy(&sem_B);
    sem_destroy(&sem_C);

    printf("Sequence printing program completed.\n");
    return 0;
}