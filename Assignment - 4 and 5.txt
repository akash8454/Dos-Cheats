Assignment - 4

Q1. Write a C program to create a child process using fork() system call. The child process will
    print the message “Child” with its process identifier and then continue in an indefinite loop.
    The parent process will print the message “Parent” with its process identifier and then
    continue in an indefinite loop.
    a) Run the program and trace the state of both processes.
		b) Terminate the child process. Then trace the state of processes.
		c) Run the program and trace the state of both processes. Terminate the parent process. Then
		trace the state of processes.
		d) Modify the program so that the parent process after displaying the message will wait for
		child process to complete its task. Again run the program and trace the state of both
		processes.
		e) Terminate the child process. Then trace the state of processes.
    
answer-


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid = fork();

    if (pid == -1) {
        // Fork failed
        perror("fork failed");
        return 1;
    }

    if (pid == 0) {
        // Child process
        while(1) {
            printf("Child Process (PID: %d)\n", getpid());
            sleep(1); // Sleep to avoid spamming the output
        }
    } else {
        // Parent process
        while(1) {
            printf("Parent Process (PID: %d)\n", getpid());
            sleep(1); // Sleep to avoid spamming the output
        }
    }

    return 0;
}

Q3. Write a C program that will create three child process to perform the following operations
		respectively:
		- First child will copy the content of file1 to file2
		- Second child will display the content of file2
		- Third child will display the sorted content of file2 in reverse order.
		- Each child process being created will display its id and its parent process id with
			appropriate message.
		- The parent process will be delayed for 1 second after creation of each child process. It
			will display appropriate message with its id after completion of all the child
			processes.

Answer-

#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
int main(){
  //if(fork()==0)
  //part1
  if(vfork()==0){
     fprintf(stderr, "Child id = %d\n", getpid());
     execl("/usr/bin/cp","cp","file1", "file2", NULL);
  }
  sleep(2);
  //part2
  if(vfork()==0){
     fprintf(stderr, "Child id = %d\n", getpid());
     execl("/usr/bin/cat","cat","file2", NULL);
  }
  sleep(2);
  //part3
  if(vfork()==0){
     fprintf(stderr, "Child id = %d\n", getpid());
     execl("/usr/bin/sort","sort","-r","file2", NULL);
  }
  //wait(NULL);
  fprintf(stderr, "Parent id = %d\n", getpid());
  return 0;
}



Q4. Write a C program that will create a child process to generate a Fibonacci series of specified
		length and store it in an array. The parent process will wait for the child to complete its task
		and then display the Fibonacci series and then display the prime Fibonacci number in the
		series along with its position with appropriate message.
Answer-

#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
int main(){
  int arr[10]={0,1};
  if(vfork()==0){
    for(int i=2; i<10; i++){
      arr[i] =  arr[i-1]+arr[i-2];
    }
    for(int i=0; i<10; i++){
      printf("%d  ",arr[i]);
    }
  }
 printf("\n");
     
  
  return 0;
}



#################################Assignment-5################################################

Q1. 1. Producer-Consumer problem
		Problem: Write a C program to implement the producer-consumer program where:
		 Producer generates integers from 1 to 100.
		 Consumer processes the numbers.
		Requirements:
		 Use a shared buffer with a maximum size of 10.
		 Use semaphores and mutex to ensure thread-safe access to the buffer.
		 Print the number that producer is producing and consumer is consuming.
		 Both producer and consumer will continue for 20 iterations

Answer-

#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include<semaphore.h>
#include<stdlib.h>
#define bufersize 10
int buffer[bufersize];
int in=0;
int out=0;

//declare sempahore variable
sem_t m, e, f;
void *pfun(void *param){
  int i, v;
  for(i=0; i<20;i++){
    v=rand()%100+1; //generate random no. between 1 to 100
    sem_wait(&e);
    sem_wait(&m);
    buffer[in]=v;
    fprintf(stderr, "Produced value = %d\n",v);
    in=(in+1)%bufersize;
    sem_post(&m);
    sem_post(&f);
  }
  pthread_exit(0);
}
void *cfun(void *param){
  int i, cv;
  for(i=0; i<20; i++){
     sem_wait(&f);
     sem_wait(&m);
     cv=buffer[out];
     fprintf(stderr, "Consumer value = %d\n", cv);
     out=(out+1)%bufersize;
     sem_post(&m);
     sem_post(&f);
  }
  pthread_exit(0);
}
int main(){
  pthread_t tid1, tid2;
  //initialize semaphore variable
  sem_init(&m, 0, 1);
  sem_init(&e, 0, bufersize);
  sem_init(&f, 0, 0);
  pthread_create(&tid1, NULL, pfun, NULL);
  pthread_create(&tid2, NULL, cfun, NULL);
  pthread_join(tid1, NULL);
  pthread_join(tid2, NULL);
  sem_destroy(&m);
  sem_destroy(&e);
  sem_destroy(&f);
  return 0;
}
  

Q2.  2. Alternating Numbers with Two Threads
		Problem: Write a program to print 1, 2, 3 ... upto 20. Create threads where two threads print
		numbers alternately.
		 Thread A prints odd numbers: 1, 3, 5 ...
		 Thread B prints even numbers: 2, 4, 6 ...
		Requirements:
		 Use semaphores to control the order of execution of the threads.
		 Ensure no race conditions occur.
    
Answer- 


#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include<semaphore.h>
sem_t s,t;

void*tfun1(void *param){
 int i;
 for(int i=1; i<=20; i+=2){
   sem_wait(&s);
   fprintf(stderr,"\n%d",i);
   sem_post(&t);
 }
  pthread_exit(0);
}

void*tfun2(void *param){
 int i;
 for(int i=2; i<=20; i+=2){
   sem_wait(&t);
   fprintf(stderr,"\n%d",i);
   sem_post(&s);
 } 
 pthread_exit(0);
}

int main(){
  pthread_t tid1, tid2;
  sem_init(&s, 0, 1);
  sem_init(&t, 0, 0);
  pthread_create(&tid1, NULL, tfun1, NULL);
  pthread_create(&tid2, NULL, tfun2, NULL);
  pthread_join(tid1, NULL);
  pthread_join(tid2, NULL);
  sem_destroy(&s);
  sem_destroy(&t);
  return 0;
}


Q3.  3. Alternating Characters
		Problem: Write a program to create two threads that print characters (A and B) alternately such as
		ABABABABA.... upto 20. Use semaphores to synchronize the threads.
		 Thread A prints A.
		 Thread B prints B.
		Requirements:
		 Use semaphores to control the order of execution of the threads.
		 Ensure no race conditions occur.
    
  Answer-
  
  #include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include<semaphore.h>
sem_t s,t;

void*tfun1(void *param){
 int i;
 for(int i=0; i<=10; i++){
   sem_wait(&s);
   fprintf(stderr,"\nA");
   sem_post(&t);
 }
  pthread_exit(0);
}

void*tfun2(void *param){
 int i;
 for(int i=0; i<=10; i++){
   sem_wait(&t);
   fprintf(stderr,"\nB");
   sem_post(&s);
 } 
 pthread_exit(0);
}

int main(){
  pthread_t tid1, tid2;
  sem_init(&s, 0, 1);
  sem_init(&t, 0, 0);
  pthread_create(&tid1, NULL, tfun1, NULL);
  pthread_create(&tid2, NULL, tfun2, NULL);
  pthread_join(tid1, NULL);
  pthread_join(tid2, NULL);
  sem_destroy(&s);
  sem_destroy(&t);
  return 0;
}

Q4) Problem: Write a program create two threads where:

•	Thread A counts down from 10 to 1.
•	Thread B counts up from 1 to 10.

Both threads should alternate execution.

Requirements:

•	Use semaphores to control the order of execution of the threads.
•	Ensure no race conditions occur.


Answer-  

#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include<semaphore.h>
sem_t s,t;

void*tfun1(void *param){
 int i;
 for(int i=10; i>=1; i--){
   sem_wait(&s);
   fprintf(stderr,"\n%d",i);
   sem_post(&t);
 }
  pthread_exit(0);
}

void*tfun2(void *param){
 int i;
 for(int i=1; i<=10; i++){
   sem_wait(&t);
   fprintf(stderr,"\n%d",i);
   sem_post(&s);
 } 
 pthread_exit(0);
}

int main(){
  pthread_t tid1, tid2;
  sem_init(&s, 0, 1);
  sem_init(&t, 0, 0);
  pthread_create(&tid1, NULL, tfun1, NULL);
  pthread_create(&tid2, NULL, tfun2, NULL);
  pthread_join(tid1, NULL);
  pthread_join(tid2, NULL);
  sem_destroy(&s);
  sem_destroy(&t);
  return 0;
}

Q5) Write a program that creates three threads: Thread A, Thread B, and Thread C. The threads must print numbers in the following sequence: A1, B2, C3, A4, B5, C6 … upto 20 numbers.

•	Thread A prints A1, A4, A7, …
•	Thread B prints B2, B5, B8, …
•	Thread C prints C3, C6, C9, ...

Requirements:

•	Use semaphores to control the order of execution of the threads.
•	Ensure no race conditions occur.


#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
sem_t sem_A, sem_B, sem_C;
int current_number = 1;

void* thread_A(void* arg) {
    while (current_number <= 20) {
        sem_wait(&sem_A); // Wait for Thread A's turn
        if (current_number <= 20) {
            printf("A%d\n", current_number);
            current_number++;
        }
        sem_post(&sem_B); // Signal Thread B to execute
    }
    pthread_exit(NULL);
}

void* thread_B(void* arg) {
    while (current_number <= 20) {
        sem_wait(&sem_B); // Wait for Thread B's turn
        if (current_number <= 20) {
            printf("B%d\n", current_number);
            current_number++;
        }
        sem_post(&sem_C); // Signal Thread C to execute
    }
    pthread_exit(NULL);
}

void* thread_C(void* arg) {
    while (current_number <= 20) {
        sem_wait(&sem_C); // Wait for Thread C's turn
        if (current_number <= 20) {
            printf("C%d\n", current_number);
            current_number++;
        }
        sem_post(&sem_A); // Signal Thread A to execute
    }
    pthread_exit(NULL);
}

int main() {
    sem_init(&sem_A, 0, 1); 
    sem_init(&sem_B, 0, 0); 
    sem_init(&sem_C, 0, 0); 
    pthread_t threadA, threadB, threadC;
    pthread_create(&threadA, NULL, thread_A, NULL);
    pthread_create(&threadB, NULL, thread_B, NULL);
    pthread_create(&threadC, NULL, thread_C, NULL);
    
    pthread_join(threadA, NULL);
    pthread_join(threadB, NULL);
    pthread_join(threadC, NULL);

    sem_destroy(&sem_A);
    sem_destroy(&sem_B);
    sem_destroy(&sem_C);

    printf("Sequence printing program completed.\n");
    return 0;
}
