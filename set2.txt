Q1)Write a shell program to calculate overtime pay of 10 employees. 
Overtime is paid at the rate of Rs. 12.00 per hour for every hour worked above 40 hours. Assume that employees do not work for fractional part of an hour. (2 Marks)

-> OVERTIME_RATE=12  
TOTAL_EMPLOYEES=10
STANDARD_HOURS=40

echo "Enter the hours worked by each employee (10 employees):"

for ((i=1; i<=TOTAL_EMPLOYEES; i++)); do
  echo -n "Employee $i: "
  read hours_worked

#   if ! [[ "$hours_worked" =~ ^[0-9]+$ ]]; then
#     echo "Invalid input. Please enter a valid number of hours."
#     exit 1
#   fi

  if [ "$hours_worked" -gt "$STANDARD_HOURS" ]; then
    overtime_hours=$((hours_worked - STANDARD_HOURS))
    overtime_pay=$((overtime_hours * OVERTIME_RATE))
  else
    overtime_hours=0
    overtime_pay=0
  fi

  echo "Employee $i worked $overtime_hours overtime hours and earned Rs. $overtime_pay as overtime pay."
done

Q2) For a given a non-negative integer n, write a C program that will create a child process to do the binary representation of n.
The parent process will wait for the child to complete its task and then it will check if the actual binary representation of the number is palindrome or not, display the appropriate message. (4 Marks)

-> #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h> // Include this header file

int isPalindrome(char *str) {
    int length = strlen(str);
    for (int i = 0; i < length / 2; i++) {
        if (str[i] != str[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}

void toBinary(int n, char *binary) {
    int index = 0;
    while (n > 0) {
        binary[index++] = (n % 2) + '0';
        n /= 2;
    }
    binary[index] = '\0';
    for (int i = 0; i < index / 2; i++) {
        char temp = binary[i];
        binary[i] = binary[index - 1 - i];
        binary[index - 1 - i] = temp;
    }
}

int main() {
    int n;
    printf("Enter a non-negative integer: ");
    scanf("%d", &n);

    pid_t pid = fork();

    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        char binary[32];
        toBinary(n, binary);
        printf("Binary: %s\n", binary);
        exit(EXIT_SUCCESS);
    } else {
        wait(NULL);
        char binary[32];
        toBinary(n, binary);
        if (isPalindrome(binary)) {
            printf("Palindrome.\n");
        } else {
            printf("Not a palindrome.\n");
        }
    }

    return 0;
}


Q3. Write a shell script that takes the internal marks, attendance percentage, and external marks as inputs. The eligibility criteria are:
• Internal marks must be greater than or equal to 16.
• Attendance percentage must be greater than or equal to 40.
• External marks must be greater than or equal to 24.
If all conditions are satisfied, display the message: Allowed for Next Semester. Otherwise display a specific message indicating which condition(s) failed, such as:
• Internal marks are insufficient.
• Attendance percentage is insufficient.
• External marks are insufficient.
• If multiple conditions fail, display all relevant messages.

-> echo "Enter internal marks:"
read internal_marks
echo "Enter attendance percentage:"
read attendance_percentage
echo "Enter external marks:"
read external_marks

eligible=true

if [ $internal_marks -lt 16 ]; then
    echo "Internal marks are insufficient."
    eligible=false
fi

if [ $attendance_percentage -lt 40 ]; then
    echo "Attendance percentage is insufficient."
    eligible=false
fi

if [ $external_marks -lt 24 ]; then
    echo "External marks are insufficient."
    eligible=false
fi

if [ "$eligible" = true ]; then
    echo "Allowed for Next Semester."
fi

Q4) Write a program that creates three threads: Thread A, Thread B, and Thread C. The threads must print numbers in the following sequence: A1, B2, C3, A4, B5, C6... upto 20 numbers.
Thread A prints A1, A4, A7, ...
Thread B prints B2, B5, B8, ...
Thread C prints C3, C6, C9, ...
Requirements:
Use semaphores to control the order of execution of the threads.
Ensure no race conditions occur. (5 Marks)

-> #include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
sem_t sem_A, sem_B, sem_C;
int current_number = 1;

void* thread_A(void* arg) {
    while (current_number <= 20) {
        sem_wait(&sem_A); // Wait for Thread A's turn
        if (current_number <= 20) {
            printf("A%d\n", current_number);
            current_number++;
        }
        sem_post(&sem_B); // Signal Thread B to execute
    }
    pthread_exit(NULL);
}

void* thread_B(void* arg) {
    while (current_number <= 20) {
        sem_wait(&sem_B); // Wait for Thread B's turn
        if (current_number <= 20) {
            printf("B%d\n", current_number);
            current_number++;
        }
        sem_post(&sem_C); // Signal Thread C to execute
    }
    pthread_exit(NULL);
}

void* thread_C(void* arg) {
    while (current_number <= 20) {
        sem_wait(&sem_C); // Wait for Thread C's turn
        if (current_number <= 20) {
            printf("C%d\n", current_number);
            current_number++;
        }
        sem_post(&sem_A); // Signal Thread A to execute
    }
    pthread_exit(NULL);
}

int main() {
    sem_init(&sem_A, 0, 1); 
    sem_init(&sem_B, 0, 0); 
    sem_init(&sem_C, 0, 0); 
    pthread_t threadA, threadB, threadC;
    pthread_create(&threadA, NULL, thread_A, NULL);
    pthread_create(&threadB, NULL, thread_B, NULL);
    pthread_create(&threadC, NULL, thread_C, NULL);
    
    pthread_join(threadA, NULL);
    pthread_join(threadB, NULL);
    pthread_join(threadC, NULL);

    sem_destroy(&sem_A);
    sem_destroy(&sem_B);
    sem_destroy(&sem_C);

    printf("Sequence printing program completed.\n");
    return 0;
}